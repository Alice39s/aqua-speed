permissions:
    contents: write
    packages: write
    actions: read

on:
    push:
        branches:
            - main
        paths:
            - "package.json"
            - "src/**"
            - ".github/**"

jobs:
    build:
        strategy:
            matrix:
                include:
                    - version: "linux-x64"
                      os: ubuntu-latest
                      platform: linux-x64-baseline
                    - version: "linux-arm64"
                      os: ubuntu-latest
                      platform: linux-arm64
                    - version: "windows-x64"
                      os: windows-latest
                      platform: windows-x64-baseline
                    # Wait https://github.com/oven-sh/bun/issues/9824
                    # - version: "windows-arm64"
                    #   os: windows-latest
                    #   platform: windows-arm64
                    - version: "darwin-x64"
                      os: ubuntu-latest
                      platform: darwin-x64
                    - version: "darwin-arm64"
                      os: ubuntu-latest
                      platform: darwin-arm64

        runs-on: ${{ matrix.os }}
        outputs:
            version: ${{ steps.get_version.outputs.VERSION }}
            platform: ${{ steps.detect_platform.outputs.PLATFORM }}
            binary_name: ${{ steps.setup_env.outputs.BINARY_NAME }}
            archive_name: ${{ steps.setup_env.outputs.ARCHIVE_NAME }}

        steps:
            - uses: actions/checkout@v4

            - uses: oven-sh/setup-bun@v2.0.1
              with:
                  bun-version: canary

            - name: Detect Platform and Compress Format
              id: detect_platform
              shell: bash
              run: |
                  PLATFORM="${{ matrix.version }}"
                  echo "PLATFORM=${PLATFORM}" >> $GITHUB_OUTPUT
                  echo "Current platform: ${PLATFORM}"
                  if [[ "${PLATFORM}" == *"linux"* ]]; then
                    echo "COMPRESS_FORMAT=tar.xz" >> $GITHUB_OUTPUT
                  else
                    echo "COMPRESS_FORMAT=zip" >> $GITHUB_OUTPUT

            - name: Extract version number
              id: get_version
              shell: bash
              run: |
                  VERSION=$(jq -r .version < package.json)
                  echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT

            - name: Setup Build Environment
              id: setup_env
              shell: bash
              run: |
                  TEMP_BUILD_DIR="${{ runner.temp }}/build"
                  mkdir -p "${TEMP_BUILD_DIR}/out"
                  mkdir -p "${TEMP_BUILD_DIR}/logs"
                  BINARY_NAME="aqua-speed-${{ steps.detect_platform.outputs.PLATFORM }}_v${{ steps.get_version.outputs.VERSION }}"
                  ARCHIVE_NAME="${BINARY_NAME}.${{ steps.detect_platform.outputs.COMPRESS_FORMAT }}"
                  echo "BINARY_NAME=${BINARY_NAME}" >> $GITHUB_OUTPUT
                  echo "ARCHIVE_NAME=${ARCHIVE_NAME}" >> $GITHUB_OUTPUT

            - name: Update System
              if: runner.os == 'Linux'
              run: |
                  sudo apt-get update -y
                  sudo apt-get install -y --only-upgrade tar

            - name: Install Dependencies (Linux)
              if: runner.os == 'Linux'
              uses: nick-fields/retry@v2
              with:
                  timeout_seconds: 30
                  max_attempts: 3
                  retry_wait_seconds: 5
                  command: bun install || { echo "Failed to install dependencies"; exit 1; }
                  shell: bash

            - name: Install Dependencies (Windows)
              if: runner.os == 'Windows'
              uses: nick-fields/retry@v2
              with:
                  timeout_seconds: 30
                  max_attempts: 3
                  retry_wait_seconds: 5
                  command: bun install
                  shell: powershell

            - name: Compile Code (Linux/macOS)
              if: runner.os != 'Windows'
              shell: bash
              run: |
                  TEMP_BUILD_DIR="${{ runner.temp }}/build"
                  bun build --compile --sourcemap --minify --bytecode \
                    --target=bun-${{ matrix.platform }} \
                    ./src/cli.ts \
                    --outfile "${TEMP_BUILD_DIR}/out/${{ steps.setup_env.outputs.BINARY_NAME }}"

            - name: Compile Code (Windows)
              if: runner.os == 'Windows'
              shell: powershell
              continue-on-error: true
              run: |
                  $TEMP_BUILD_DIR = "${{ runner.temp }}\build"
                  bun build --compile --sourcemap --minify --bytecode `
                    --target=bun-${{ matrix.platform }} `
                    ./src/cli.ts --outfile out

                  Start-Sleep -Seconds 2
                  $bunBuild = Get-ChildItem -Path "." -Filter "*.bun-build" | Select-Object -First 1
                  if ($bunBuild) {
                    Move-Item $bunBuild.FullName "$TEMP_BUILD_DIR\out\${{ steps.setup_env.outputs.BINARY_NAME }}.exe" -Force
                  }

            - name: Generate Checksums (Linux/macOS)
              if: runner.os != 'Windows'
              working-directory: ${{ runner.temp }}/build/out
              shell: bash
              run: |
                  sha1sum ${{ steps.setup_env.outputs.BINARY_NAME }}* > checksum.txt

            - name: Generate Checksums (Windows)
              if: runner.os == 'Windows'
              shell: powershell
              run: |
                  $TEMP_BUILD_DIR = "${{ runner.temp }}\build"
                  $files = Get-ChildItem -Path "$TEMP_BUILD_DIR\out" -Filter "${{ steps.setup_env.outputs.BINARY_NAME }}*"
                  $files | ForEach-Object {
                    $hash = Get-FileHash -Algorithm SHA1 -Path $_.FullName
                    "$($hash.Hash.ToLower())  $($_.Name)" 
                  } | Set-Content -Path "$TEMP_BUILD_DIR\out\checksum.txt" -Encoding utf8

            - name: Compress Artifacts (Linux)
              if: startsWith(steps.detect_platform.outputs.PLATFORM, 'linux')
              working-directory: ${{ runner.temp }}/build/out
              shell: bash
              run: |
                  tar -c -I 'xz -5 -T0' -f ${{ steps.setup_env.outputs.ARCHIVE_NAME }} ${{ steps.setup_env.outputs.BINARY_NAME }}* checksum.txt

            - name: Compress Artifacts (macOS)
              if: contains(steps.detect_platform.outputs.PLATFORM, 'darwin')
              working-directory: ${{ runner.temp }}/build/out
              shell: bash
              run: |
                  zip -j ${{ steps.setup_env.outputs.ARCHIVE_NAME }} ${{ steps.setup_env.outputs.BINARY_NAME }}* checksum.txt

            - name: Compress Artifacts (Windows)
              if: runner.os == 'Windows'
              working-directory: ${{ runner.temp }}\build\out
              shell: powershell
              run: |
                  Compress-Archive -Path "${{ steps.setup_env.outputs.BINARY_NAME }}*.exe", "checksum.txt" `
                    -DestinationPath "${{ steps.setup_env.outputs.ARCHIVE_NAME }}" -Force

            - name: Upload Build Artifacts
              uses: actions/upload-artifact@v4
              with:
                  name: ${{ steps.setup_env.outputs.ARCHIVE_NAME }}
                  path: |
                      ${{ runner.temp }}/build/out/${{ steps.setup_env.outputs.ARCHIVE_NAME }}
                      ${{ runner.temp }}/build/out/checksum.txt
                  retention-days: 1
